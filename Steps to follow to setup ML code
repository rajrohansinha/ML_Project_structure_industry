## 🚀 ML Project Setup – Stage 1 (Environment + GitHub)

### 🖥 **1️⃣ Setup Environment (Anaconda Prompt)**

1. **Open Anaconda Prompt**  

2. **Navigate to your project folder**  
   Use the `cd` command to change directories to your project location. This keeps all your work organized in one place.
   cd C:\Users\rroha\OneDrive\Desktop\Raj\ML_Project_Industrial

3. **Create a virtual environment**  
   Creating a virtual environment isolates your project dependencies from other Python projects. This prevents version conflicts and makes your project reproducible.

   conda create -p venv python==3.8 -y

   - `-p venv` creates the environment in a folder named `venv` inside your project.
   - `python==3.8` specifies the Python version.
   - `-y` auto-confirms the installation.

4. **Activate the environment**  
   Activating ensures all Python commands use the environment’s interpreter and packages.

   conda activate venv/

### 🌐 **2️⃣ Setup GitHub Repository (VS Code Terminal)**

1. **Initialize Git**  
   This sets up Git tracking in your project folder.

   git init

2. **Set main branch name to `main`**  
   Standardizes your branch naming for collaboration.

   git branch -M main

3. **Link to GitHub repo**  
   Connects your local project to the remote repository on GitHub.

   git remote add origin https://github.com/rajrohansinha/ML_Project_structure_industry.git

4. **Verify remote**  
   Confirms the remote repository is linked correctly.

   git remote -v
   
   You should see both fetch and push URLs for your repo.

5. **Push your code (first push)**  
   Uploads your local files to GitHub.

   git push -u origin main

6. **Pull (sync)**  
   Downloads any changes from GitHub to your local folder.

   git pull

### 🏗 **3️⃣ Project Skeleton Creation**

1. **Create key files and folders**  
   - `README.md`: Describes your project, usage, and setup instructions.
   - `requirements.txt`: Lists all Python libraries your project needs.
   - `setup.py`: Contains metadata and instructions for packaging your project.
   - `.gitignore`: Specifies files/folders Git should ignore (e.g., environment, cache).
   - `src/`: Main source code folder.
     - `__init__.py`: Marks `src` as a Python package, enabling imports.

### 📦 **4️⃣ Setup `setup.py` for packaging**

- The `setup.py` file allows your project to be installed as a package.  
- The `get_requirements` function reads dependencies from `requirements.txt`, ensuring all required libraries are installed when someone sets up your project.

```python
from setuptools import find_packages, setup
from typing import List

HYPEN_E_DOT='-e .'
def get_requirements(file_path:str)->List[str]:
    '''
    this function will return the list of requirements
    '''
    requirements=[]
    with open(file_path) as file_obj:
        requirements=file_obj.readlines()
        requirements=[req.replace("\n","") for req in requirements]

        if HYPEN_E_DOT in requirements:
            requirements.remove(HYPEN_E_DOT)
    return requirements

setup(
    name='ml_project_industrial',
    version='0.0.1',
    author='Rohan',
    author_email='r.rohan921998@gmail.com',
    packages=find_packages(),
    install_requires=get_requirements('requirements.txt')
)
```

### 📜 **5️⃣ Add `requirements.txt`**

- List all libraries your project needs.  
- This makes it easy for others to install dependencies with one command.

pip install -r requirements.txt

### 🚫 **6️⃣ Add `.gitignore`**

- Prevents unnecessary files (like environments, cache, system files) from being tracked by Git.
- Keeps your repository clean and focused on source code.

# Ignore virtual environment
venv/

# Ignore Python cache
__pycache__/
*.pyc
*.pyo
*.pyd

# Ignore Jupyter notebook checkpoints
.ipynb_checkpoints/

# Ignore VS Code settings
.vscode/

# Ignore system files
.DS_Store
Thumbs.db

### 🔄 **7️⃣ Stage, Commit & Push**

- `git add .`: Stages all changes for commit.
- `git status`: Shows what will be committed.
- `git commit -m "setup"`: Saves your changes with a message.
- `git push -u origin main`: Uploads your changes to GitHub.

You should see a success message confirming your code is on GitHub.

📂 **Your repo structure at Stage 1 looks like this:**

```
ML_Project_Industrial/
│
├── venv/                # virtual environment (ignored by Git)
├── src/
│   └── __init__.py
├── requirements.txt
├── setup.py
├── .gitignore
└── README.md
```